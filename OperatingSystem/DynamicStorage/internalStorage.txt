/*
 * 内存类：
 * 假定整个内存中只有20个单元的内存块。则空内存，阻塞队列1，阻塞队列2，阻塞队列3，就绪队列所有的Storage
 * 加起来的数目是20.
 *     成员：1.空内存
 *         2.阻塞队列1
 *         3.阻塞队列2
 *         4.阻塞队列3
 *         5.就绪队列
 *     方法：
 *         1.Initialize:初始化内存的方法,初始化之后，空内存块有20个Storage，阻塞队列1，
 *                      阻塞队列2，阻塞队列3，就绪队列都是空。
 *         2.display:内存快照，展示内存里面阻塞队列，就绪队列，还有空内存的情况。
 *         3.Apply：创建一个进程。申请一块PCB，当内存里面有空的内存块时，可以申请，否则报错。
 *         4.Unique:传入一个int型参数，代表进程号，方法作用是判断这个进程号是否是唯一的。唯一的返回true,否则返回false。
 *         5.ChangeToWait:把进程状态从运行态或者就绪态转为等待态。传入一个int型参数来表示等待的原因，根据不同的等待原因把进程放进不同的等待队列里面去。
 *         6.Run:运行一个进程。如果一个进程已经运行完成，就回收那一块内存，把这个内存加入EmptyLine。
 *         7. IsEmpty:判断内存中是否所有内存都是空的。
 *         8.RevokeWait:传入两个参数，分别是等待的原因和进程号。如果指定原因的等待队列中有相应的进程号，就把哪个进程唤醒。否则报错。
 */
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Scanner;
public class internalStorage {
	private static LinkedList<Storage> EmptyLine;
        private static LinkedList<Strong>[]  WaitingLine = new LinkedList<Strong>[3];
	private static LinkedList<Storage> ReadyLine;
	
	public static void Initialize() {
		EmptyLine = new LinkedList<Storage>();
		WaitingLine[0] = new LinkedList<Storage>();
		WaitingLine[1] = new LinkedList<Storage>();
		WaitingLine[2] = new LinkedList<Storage>();
		ReadyLine = new LinkedList<Storage>();
		for(int i=0;i<20;i++) {
			Storage tem = new Storage();
			EmptyLine.add(tem);
		}
	}
	public static void display() {
		System.out.println("===========================================");
		int i = EmptyLine.size();
                int j = 0;
		System.out.println("The number of empty storage is "+i);
		System.out.println("");
		
                while(j++<3){
                        i = WaitingLine[j].size();
		        System.out.println("The number of waiting line "+j+"is "+i);
		        while(i>0) {
				Storage tem = WaitingLineOne.get(i-1);
			        tem.display();
			        i--;
		        }
		        System.out.println("");
                }
		
		i = ReadyLine.size();
		System.out.println("The number of ready line is "+i);
		while(i>0) {
			Storage tem = ReadyLine.get(i-1);
			tem.display();
			i--;
		}
		System.out.println("");
	}
	
	public static void Apply(){
		int i = EmptyLine.size();
		if(i==0) {
			System.out.println("Fail!There is no empty storage!");
			return;
		}
		else {
			Storage tem = EmptyLine.removeFirst();
			int flag = 1;
			while(flag==1) {
				boolean judge;
				int ti;
				int j;
				Scanner read = new Scanner(System.in);
				
				System.out.println("Input the ID of PCB:");
				try {
					j = read.nextInt();
				        judge = Unique(j);
				        if(!judge){
				    	     System.out.println("Fail!The ID of PCB is no unique!Input again!");
					continue;
				        }
				    }
			         catch(Exception e) {
					System.out.println("Please input number!Input again");
					continue;
				 }
				
				System.out.println("Input the running time of PCB:");
				try {
					ti = read.nextInt();
				}
				catch(Exception e) {
					System.out.println("Please input number!Input again");
					continue;
				}
			        flag = 0;
				System.out.println("Input the name of PCB");
				String na = read.next();
				tem.FillInPCB(j, na,ti);
				ReadyLine.add(tem);
			}
		}
	}
	public static boolean Unique(int i) {
                int row = 0;
                while(row++<3){
			int number = WaitingLine[row].size();
			if(number!=0) {
				Iterator<Storage> iter = WaitingLine[row].iterator();
				while(iter.hasNext()) {
					Storage temone = iter.next();
					PCB temtwo  = temone.getContent();
			 	        int j = temtwo.getID();
			   	        if(i==j)
			    		return false;
				}
			}
		}
		
		number = ReadyLine.size();
		if(number!=0) {
			Iterator<Storage> iter = ReadyLine.iterator();
			while(iter.hasNext()) {
				Storage temone = iter.next();
				PCB temtwo  = temone.getContent();
			    int j = temtwo.getID();
			    if(i==j)
			    	return false;
			}
		}
		return true;
	}

	public static boolean ChangeToWait(int reason,int IDofPCB) {
		Storage temone;
		PCB temtwo;
		int tem;
		int flag = 1;
		int i=0;

		temone = ReadyLine.get(i);
		temtwo = temone.getContent();
		tem = temtwo.getID();
		while(flag==1) {
			if(tem==IDofPCB) {
				flag = 0;
				ReadyLine.remove(i);
				temone.changeStatus("Waiting");
                                if(reason==0)
					temone.addReason("Waiting for Input");
                                else if(reason==1)
					temone.addReason("Waiting for printer");
                                else if(reason==0)
					temone.addReason("Waiting for another process");
				WaitingLine[reason].add(temone);
				return true;
			}
			else {
				if(i<ReadyLine.size()-1) {
					i++;
					temone = ReadyLine.get(i);
					temtwo = temone.getContent();
					tem = temtwo.getID();
                                }
				else
				        break;
			}
		}
		return false;
	}
	public static void Run(int count) {
		if(ReadyLine.size()!=0) {
			Storage tem = ReadyLine.getFirst();
			int i = tem.Run(count);
		    if(i==0) {
		    	Storage one = ReadyLine.removeFirst();
			    one.Recycle();
			    EmptyLine.add(one);
		    }
		    else {
		    	Storage one = ReadyLine.removeFirst();
		    	ReadyLine.addLast(one);
		    }
		}
        }
	public static boolean IsEmpty() {
		int i = ReadyLine.size();
		if(i==0){
                         int j = 0;
                         while(j++<3){
                                   i = WaitingLine[j].size();
                                   if(i!=0)
                                          return false;
                         }
                         return true;
                }
		else
			return false;
	}
	public static boolean RevokeWait(int reason,int IDofPCB) {
		int i= 0;
		Storage temone;
		PCB temtwo;
		int tem;
		int flag = 1;
  
            	temone = WaitingLine[reason].get(i);
		temtwo = temone.getContent();
		tem = temtwo.getID();
		while(flag==1) {
			if(tem==IDofPCB) {
				flag = 0;
				WaitingLine[reason].remove(i);
				temone.changeStatus("Ready");
				ReadyLine.add(temone);
				return true;
			}
			else {
				if(i<WaitingLine[reason].size()-1) {
					i++;
					temone =WaitingLine[reason].get(i);
					temtwo = temone.getContent();
					tem = temtwo.getID();
				}
				else
				        break;
			}
		}
		return false;
	}
	public static void Revoke() {
		int i = 0;
                int j= 0;
		while(i++<3) {
                        j = WaitingLine[i].size();
                        if(j>0){
			      Storage one = WaitingLine[i].removeFirst();
			      one.changeStatus("Ready");
			      ReadyLine.add(one);
		        }
                }
	}
}
